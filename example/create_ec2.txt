extern crate rusoto_core;
extern crate rusoto_credential;
extern crate rusoto_ec2;
extern crate rusoto_sts;

use rusoto_core::{HttpClient, Region};
use rusoto_ec2::{Ec2, Ec2Client};
use rusoto_ec2::{DescribeInstancesRequest, RunInstancesRequest};
use std::fs::File;
use rusoto_sts::{StsAssumeRoleSessionCredentialsProvider, Sts, GetAccessKeyInfoRequest};
use rusoto_credential::ProvideAwsCredentials;
use crate::credentials::set_env::set_env_cred_from;

const IAM_FILE:&str = "C:/Users/k3nne/Documents/aws/credentials/mc-server/new_user_credentials.csv";
const REGION:Region = Region::UsEast2;
const ROLE_ARN:&str = "arn:aws:iam::417217345236:role/i_am_admin";

const AMI_TYPE:&str = "t2.micro";
const AMI_ID:&str = "ami-07efac79022b86107";

#[tokio::main]
async fn main() {
    let iam_cred_file = File::open(IAM_FILE.to_string()).unwrap();
    set_env_cred_from(iam_cred_file).await;

    let get_region = ||REGION;

    // https://github.com/rusoto/rusoto/issues/1102
    //Thank god for Jonhoo
    let sts = rusoto_sts::StsClient::new(get_region());
    let provider = StsAssumeRoleSessionCredentialsProvider::new(
        sts,
        ROLE_ARN.to_string(),
        "session-name".to_string(),
        None,
        None,
        None,
        None
    );

    let ec2_client = Ec2Client::new_with(HttpClient::new().unwrap(), provider, get_region());

    //https://www.gitmemory.com/issue/rusoto/rusoto/1804/679881157
    //run instance#####################################################################
    let run_req = RunInstancesRequest {
        instance_type: Some(AMI_TYPE.to_string()),
        //TODO figure out issue ami-xxx not recognized as ami-id
        image_id: Some(AMI_ID.to_string()),
        min_count: 1,
        max_count: 1,
        ..Default::default()
    };
    let res = ec2_client.run_instances(run_req).await;
    match res {
        Ok(val) => {println!("{:?}", val)},
        Err(e) => panic!("{:?}", e)
    }
    describe(&ec2_client);


}
async fn describe(ec2: &Ec2Client){
    let describe_instances_request = DescribeInstancesRequest::default();
    match ec2.describe_instances(describe_instances_request).await {
        Ok(val) => {println!("{:?}", val)},
        Err(e) => panic!("{:?}", e)
    };
}
